<%
var cref = 0;
var crefToHw = [];
var hwToCref = [];
var hohs = [];
var hwcfgs = [];

var idToRegisterValue = (id) => {
    var ret;
    if (id & 0x80000000) {
        id = id & (~0x80000000);
        ret = (id << 3) & 0xFFE00000;
        ret |= 0x00180000;
        ret |= (id << 1) & 0x7FFFE;
        return [ret, ret, 0xFFFFFFFF, 0x00000000];

    }
    ret = (id & 0x7FF) << 21;
    return [0xFFFFFFFF, 0x00000000, ret, ret];
};

var idFilterReduce = (result, id) => {
    if (!result) {
        result = [0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000];
    }

    reg = idToRegisterValue(id);
    result[0] = result[0] & reg[0];
    result[1] = result[1] | reg[1];
    result[2] = result[2] & reg[2];
    result[3] = result[3] | reg[3];
    return result;
};


var oneZeroToAcceptMask = (oneZero) => {
    return {
        mask0: (oneZero[0] ^ oneZero[1]) | (0x01 << 20),
        accept0: oneZero[0] & oneZero[1],
        mask1: (oneZero[2] ^ oneZero[3]) | (0x07 << 16),
        accept1: oneZero[2] & oneZero[3],
    }
}


for (var i = 0; i < globalInfo.CanIf.canhohs.length; i++) {
    hoh = globalInfo.CanIf.canhohs[i];
    var eol = i >= globalInfo.CanIf.canhohs.length - 1 || hoh.hw != globalInfo.CanIf.canhohs[i + 1].hw;
    hohs.push({
        index: i,
        controllerRef: cref,
        CanObjectType: hoh.dir == 'tx' ? 'CAN_OBJECT_TYPE_TRANSMIT' : 'CAN_OBJECT_TYPE_RECEIVE',
        Can_EOL: eol ? 1 : 0,
    });

    if (hwcfgs.findIndex(cfg => cfg.hw == hoh.hw) < 0) {
        for (var x of cfg) {
            if (hoh.hw == x.hw) {
                hwcfgs.push({
                    hw: x.hw,
                    hohOffset: i,
                    baud: (x.hasOwnProperty('baud')) ? x.baud : 250000,
                });
                break;
            }
        }

    }

    if (hoh.dir == "rx") {
        var hwcfg = hwcfgs.find(x => x.hw == hoh.hw)
        var oneZero = hoh.ids.reduce(idFilterReduce, null);
        var acceptMask = oneZeroToAcceptMask(oneZero);
        //console.log("oneZero:" + uint32.toHex(oneZero.allOne)+","+uint32.toHex(oneZero.allZero));
        //console.log("acceptMask:" + uint32.toHex(acceptMask.accept)+","+uint32.toHex(acceptMask.mask));
        hwcfg.filter = oneZeroToAcceptMask(oneZero);
    }

    if (eol) {
        crefToHw[cref] = 'CAN_CTRL_' + hoh.hw;
        hwToCref[hoh.hw] = cref;
        cref++;
    }
}
%>

#include <stdlib.h>
#include "CanIf_Cbk.h"

const Can_HardwareObjectType CanHardwareObject[] = {<%
for (var hoh of hohs) {%>
    { /* <%- JSON.stringify(hoh) %> */
        /* Hoh */ <%- hoh.index %>U,
        /* controllerRef */ <%- hoh.controllerRef %>U,
        /* CanObjectType = */ <%- hoh.CanObjectType %>,
        /* Can_EOL =  */ <%- hoh.Can_EOL %>U,
    },<%
}%>
};


<%var i = 0;
for (var hwcfg of hwcfgs){%>
/*
hwcfg.filter.mask0 = <%- hwcfg.filter.mask0.toString(16) %>
hwcfg.filter.mask1 = <%- hwcfg.filter.mask1.toString(16) %>
hwcfg.filter.accept0 = <%- hwcfg.filter.accept0.toString(16) %>
hwcfg.filter.accept1 = <%- hwcfg.filter.accept1.toString(16) %>
*/
static Can_FilterMaskType Can_FilterMaskConfigData_Mask_<%- i %> = {
    {<%- (hwcfg.filter.mask0 >> 24) & 0xFF %>U, <%- (hwcfg.filter.mask0 >> 16) & 0xFF %>U, <%- (hwcfg.filter.mask0 >> 8) & 0xFF %>U, <%- (hwcfg.filter.mask0 >> 0) & 0xFF %>U, <%- (hwcfg.filter.mask1 >> 24) & 0xFF %>U, <%- (hwcfg.filter.mask1 >> 16) & 0xFF %>U, <%- (hwcfg.filter.mask1 >> 8) & 0xFF %>U, <%- (hwcfg.filter.mask1 >> 0) & 0xFF %>U},
    {<%- (hwcfg.filter.accept0 >> 24) & 0xFF %>U, <%- (hwcfg.filter.accept0 >> 16) & 0xFF %>U, <%- (hwcfg.filter.accept0 >> 8) & 0xFF %>U, <%- (hwcfg.filter.accept0 >> 0) & 0xFF %>U, <%- (hwcfg.filter.accept1 >> 24) & 0xFF %>U, <%- (hwcfg.filter.accept1 >> 16) & 0xFF %>U, <%- (hwcfg.filter.accept1 >> 8) & 0xFF %>U, <%- (hwcfg.filter.accept1 >> 0) & 0xFF %>U},
    CAN_IDAM_2_32BIT,
}; <%
    i++;
}%>

const Can_HardwareConfigType CanHardwareObjectConfigs[] = {<%

var i = 0;
var hasOtherBaud = false;
for (var hwcfg of hwcfgs){%>
    {
        /* CanControllerActivation = */ TRUE,
        /* CanControllerBaudRate = */ <%- hwcfg.baud / 1000 %>U,
        /* CanControllerPropSeg = */ 1U,
        /* CanControllerSeg1 = */ 10U,
        /* CanControllerSeg2 = */ 3U,
        /* CanControllerTimeQuanta = */ 0U,
        /* CanCpuClockRef = */ 0U,
        /* CanWakeupSourceRef = */ 0U,
        /* Can_Hoh = */ &CanHardwareObject[<%- hwcfg.hohOffset %>],
        /* Can_Loopback = */ FALSE,
        /* Can_Fifo = */ 0U,
        /* CanFilterMask = */ &Can_FilterMaskConfigData_Mask_<%- i %>,
    }, <%
    if (hwcfg.baud != 250000) {
        hasOtherBaud = true;
    }
    i++;
}%>
};

<% if (hasOtherBaud) {%>
const Can_HardwareConfigType CanHardwareObjectConfigs_TestMode[] = {<%

var i = 0;
for (var hwcfg of hwcfgs){%>
    {
        /* CanControllerActivation = */ TRUE,
        /* CanControllerBaudRate = */ 250U,
        /* CanControllerPropSeg = */ 1U,
        /* CanControllerSeg1 = */ 10U,
        /* CanControllerSeg2 = */ 3U,
        /* CanControllerTimeQuanta = */ 0U,
        /* CanCpuClockRef = */ 0U,
        /* CanWakeupSourceRef = */ 0U,
        /* Can_Hoh = */ &CanHardwareObject[<%- hwcfg.hohOffset %>],
        /* Can_Loopback = */ FALSE,
        /* Can_Fifo = */ 0U,
        /* CanFilterMask = */ &Can_FilterMaskConfigData_Mask_<%- i %>,
    }, <%
    i++;
}%>
};
<%} else { %>
#define CanHardwareObjectConfigs_TestMode CanHardwareObjectConfigs
<%}%>

const Can_ConfigType CanConfig = {
    /* CanHardwareConfig = */
    CanHardwareObjectConfigs,
    /* CanCallbacks = */
    {
        NULL, //CanIf_CancelTxConfirmation,
        CanIf_RxIndication,
        CanIf_ControllerBusOff,
        CanIf_TxConfirmation,
        NULL,
        CanIf_ControllerModeIndication,
        NULL,
    }
};

const Can_ConfigType CanConfig_TestMode = {
    /* CanHardwareConfig = */
    CanHardwareObjectConfigs_TestMode,
    /* CanCallbacks = */
    {
        NULL, //CanIf_CancelTxConfirmation,
        CanIf_RxIndication,
        CanIf_ControllerBusOff,
        CanIf_TxConfirmation,
        NULL,
        CanIf_ControllerModeIndication,
        NULL,
    }
};

const Can_ControllerHwIdType CanControllerRefIdToHwIdMap[] = {<%
var i = 0;
for (var x of crefToHw) {%>
    <%- x %>,<%
    i++;
}
for (; i < 5; i ++) {%>
    CAN_CTRL_NONE,<%
}%>
};

const Can_ControllerRefIdType CanControllerHwIdToRefIdMap[CAN_CTRL_MAX] = {<%
for (var i = 0; i < 5; i ++) {
    x = hwToCref[i];
    if (x==undefined) x = 0xff;%>
    <%- x %>U,<%
}%>
};

const uint8 CanUsedControllerNum = <%- hwcfgs.length %>U;
const uint8 CanUsedHohNum = <%- hwcfgs.length * 2 %>U;
