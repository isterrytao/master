<%
var powernameindex = [
    "dchgcontinues", "dchgpeak", "dchgfb", "chgcontinues", "dcchg", "acchg",
];
var index = 0;
for (var powername in cfg) {
    power = cfg[powername];
    if (powernameindex[index] != powername) throw 'powerm名称及次序不能改变:"dchgcontinues", "dchgpeak", "dchgfb", "chgcontinues", "dcchg", "acchg",'
    if (power.soc.length * power.temp.length != power.current.length) throw "表格数据长度异常"
    index++;
}
%>
/*lint -e* -w0*/

#include "PowerM.h"
#include "Soc.h"
#include "Statistic.h"


static Std_ReturnType thisSocGet(uint16 *v) {
    *v = Soc_Get();
    return Soc_SocIsValid(*v) ? E_OK : E_NOT_OK;
}
<%
for (var powername in cfg) {
    power = cfg[powername];
    if (power.hasOwnProperty('decrease')) {
        if (power.decrease.length > 0) {%>
static Std_ReturnType thisHvGet(uint16 *v) {
    *v = Statistic_GetBcuHvMax();
    return CellDataM_VoltageIsValid(*v) ? E_OK : E_NOT_OK;
}<%
    break;
        }
    }
%><%}%>

<%
for (var powername in cfg) {
    power = cfg[powername];
%>

/*
====================================================
<%- powername %>
====================================================
*/
static uint16 const <%- powername %>socxvalue[] = {<%
    for (var soc of power.soc) {
        %>PERCENT_TO_SOC(<%- soc%>), <%
    }%>
};

static sint16 const <%- powername %>tempyvalue[] = {<%
    for (var temp of power.temp) {
        %>TEMPERATURE_FROM_C(<%- temp%>), <%
    }%>
};

static sint16 const <%- powername %>tempaltyvalue[] = {<%
    for (var temp of power.temp) {
        %>TEMPERATURE_FROM_C(<%- (temp-2)%>), <%
    }%>
};

static uint16 const <%- powername %>tableValue[] = {<%
    for (var current of power.current) {
        %>CURRENT_100MA_FROM_A(<%- current%>U), <%
    }%>
};

<%
if (power.diag.length > 0) { %>
static const PowerM_DiagnosisPercentMapType <%- powername %>diag[] = { <%
        for (var diag of power.diag) { %>
    {
        DIAGNOSIS_ITEM_<%- diag.type %>, <%- diag.percent[0] %>U, <%- diag.percent[1] %>U, <%- diag.percent[2] %>U, <%- diag.percent[3] %>U,
    },
        <%} %>
};
#define <%- powername %>diag_SIZE   (ARRAY_SIZE(<%- powername %>diag)) <%
} else { %>
#define <%- powername %>diag        NULL
#define <%- powername %>diag_SIZE   0U <%
} %>

<%
if (power.hasOwnProperty('decrease')) {
    if (power.decrease.length > 0) {
        for (var i = power.decrease.length - 1; i >= 0; i--) { %>
static const PowerM_ChargeEndConfigType <%- powername %>_<%- i%>_DecreaseCurrent = { <%
        if (i == (power.decrease.length - 1)) { %>
    &<%- powername %>_<%- i %>_DecreaseCurrent,
            <%} else { %>
    &<%- powername %>_<%- (i + 1) %>_DecreaseCurrent,
            <%} %>
    <%- power.decrease[i].startval %>,
    <%- power.decrease[i].delaytime %>UL,
    POWERM_CHARGE_END_DEC_<%- power.decrease[i].type %>,
        <%if (power.decrease[i].type.slice( -8) == "CONSTVAL") { %>
    CURRENT_100MA_FROM_A(<%- power.decrease[i].param %>),
            <%} else { %>
    <%- power.decrease[i].param %>,
                    <%} %>
    CURRENT_100MA_FROM_A(<%- power.decrease[i].minval %>),
}; <%
        }
chargeEndVal = power.decrease[0].startval %>
#define <%- powername %>decrease        (&<%- powername%>_0_DecreaseCurrent)
#define <%- powername %>_thisHvGet      (thisHvGet) <%
    } else {
chargeEndVal = 0 %>
#define <%- powername %>decrease        NULL
#define <%- powername %>_thisHvGet      NULL <%
    }
} else {
chargeEndVal = 0 %>
#define <%- powername %>decrease        NULL
#define <%- powername %>_thisHvGet      NULL <%
} %>


static const PowerM_ConfigParamType PowerMCur<%- powername %>ConfigTable = {
    ARRAY_SIZE(<%- powername %>socxvalue), /**< 功率控制表X轴分隔数量 */
    ARRAY_SIZE(<%- powername %>tempyvalue), /**< 功率控制表Y轴分隔数量 */
    <%- powername %>socxvalue, /**< 功率控制表X轴分隔表 */
    <%- powername %>tempyvalue, /**< 功率控制表Y轴分隔表 */
    <%- powername %>tempaltyvalue, /**< 功率控制表Y轴回滚分隔表 */
    <%- powername %>tableValue, /**< 各个分隔对应的值 */
    POWERM_YAXIS_USE_MIN, /**< 在yAxis和yAltAxis查询到的值取怎样取值，POWERM_YAXIS_USE_XX */
    0U, /**< 在y轴增加时使用Alt表 */
    POWERM_XAXIS_SUPPORT_L2R, /**< X轴支持变动方向 */
    0U, /**< X轴区间线性插值 */
    (uint8)<%- powername %>diag_SIZE, /**<  诊断故障功率百分比数量 */
    <%- powername %>diag, /**<  断故障功率百分比表 */
    thisSocGet, /**< 获取X轴值的函数 */
    500U, /**< 功率输出时增加斜率时间参数 */
    CURRENT_100MA_FROM_A(50U), /**< 功率输出时增加斜率步进参数 */
    500U, /**< 功率输出时减小斜率时间参数 */
    CURRENT_100MA_FROM_A(10U), /**< 功率输出时减小斜率步进参数 */
    <%- chargeEndVal%>U, /**< 充电末端X轴达到这个值时进入降流阶段 */
    <%- powername %>decrease /* &dcDecreaseCurrent */, /**< 降流链表 */
    <%- powername %>_thisHvGet /* thisHvGet */,  /**< 获取降流末端比较值函数 */
    NULL, /**< getChargeEndTable 获取降流链表，此函数配置后“chargeEndConfigs”和“getChargeEndCheckVal”将不起作用 */
    NULL, /**< 计算出查表值之后，使用改函数修改查标值，可用于复杂降流策略 */
    NULL, /**< 在复位降流表时，只用该函数复位用户层数据，一般与hook函数配合使用 */
    0UL, /**< 温度改变引起查表区域变化时的确认时间，单位ms */
};
<%
}
%>

// 加热电流表
static uint16 const chgheatersocxvalue[] = {PERCENT_TO_SOC(104)};
static sint16 const chgheatertempyvalue[] = {TEMPERATURE_FROM_C(-10), TEMPERATURE_FROM_C(0), TEMPERATURE_FROM_C(15)};
static uint16 const chgheatertableValue[] = {
    CURRENT_100MA_FROM_A(20U), // < -10
    CURRENT_100MA_FROM_A(10U), // < 0
    CURRENT_100MA_FROM_A(5U), // < 15
};
static const PowerM_DiagnosisPercentMapType chgheatdiag[] = {
    {DIAGNOSIS_ITEM_CHG_HEAT_OC, {0U, 0U, 0U, 0U}},
};
static const PowerM_ConfigParamType PowerMCurChgHeaterConfigTable = {
    ARRAY_SIZE(chgheatersocxvalue), /**< 功率控制表X轴分隔数量 */
    ARRAY_SIZE(chgheatertempyvalue), /**< 功率控制表Y轴分隔数量 */
    chgheatersocxvalue, /**< 功率控制表X轴分隔表 */
    chgheatertempyvalue, /**< 功率控制表Y轴分隔表 */
    chgheatertempyvalue, /**< 功率控制表Y轴回滚分隔表 */
    chgheatertableValue, /**< 各个分隔对应的值 */
    POWERM_YAXIS_USE_LT, /**< 在yAxis和yAltAxis查询到的值取怎样取值，POWERM_YAXIS_USE_XX */
    0U, /**< 在y轴增加时使用Alt表 */
    POWERM_XAXIS_SUPPORT_BDIR, /**< X轴支持变动方向 */
    0U, /**< X轴区间线性插值 */
    (uint8)ARRAY_SIZE(chgheatdiag), /**<  诊断故障功率百分比数量 */
    chgheatdiag, /**<  断故障功率百分比表 */
    thisSocGet, /**< 获取X轴值的函数 */
    500U, /**< 功率输出时增加斜率时间参数 */
    CURRENT_100MA_FROM_A(10U), /**< 功率输出时增加斜率步进参数 */
    500U, /**< 功率输出时减小斜率时间参数 */
    CURRENT_100MA_FROM_A(10U), /**< 功率输出时减小斜率步进参数 */
    0U, /**< 充电末端X轴达到这个值时进入降流阶段 */
    NULL, /**< 降流链表 */
    NULL,  /**< 获取降流末端比较值函数 */
    NULL, /**< getChargeEndTable 获取降流链表，此函数配置后“chargeEndConfigs”和“getChargeEndCheckVal”将不起作用 */
    NULL, /**< 计算出查表值之后，使用改函数修改查标值，可用于复杂降流策略 */
    NULL, /**< 在复位降流表时，只用该函数复位用户层数据，一般与hook函数配合使用 */
    0UL, /**< 温度改变引起查表区域变化时的确认时间，单位ms */
};

static Std_ReturnType thisExtCurXGet(uint16 *v) {
    (void)v;
    return E_NOT_OK;
}

// 扩展电流最大允许功率表（无特殊说明，所有温度点必须有回滚）
static uint16 const extcursocxvalue[] = {PERCENT_TO_SOC(104)};
static sint16 const extcurtempyvalue[] = {TEMPERATURE_FROM_C(-20), TEMPERATURE_FROM_C(60)};
static sint16 const extcurtempaltyvalue[] = {TEMPERATURE_FROM_C(-21), TEMPERATURE_FROM_C(55)};
static uint16 const extcurtableValue[] = {
    CURRENT_100MA_FROM_A(0U), CURRENT_100MA_FROM_A(0U), // <= -20
    CURRENT_100MA_FROM_A(300U), CURRENT_100MA_FROM_A(300U), // <= 60
};
static const PowerM_DiagnosisPercentMapType extcurdiag[] = {
    {DIAGNOSIS_ITEM_DCHG_LV, {60U, 50U, 10U, 0U}},
};
static const PowerM_ConfigParamType PowerMCurExtCurConfigTable = {
    ARRAY_SIZE(extcursocxvalue), /**< 功率控制表X轴分隔数量 */
    ARRAY_SIZE(extcurtempyvalue), /**< 功率控制表Y轴分隔数量 */
    extcursocxvalue, /**< 功率控制表X轴分隔表 */
    extcurtempyvalue, /**< 功率控制表Y轴分隔表 */
    extcurtempaltyvalue, /**< 功率控制表Y轴回滚分隔表 */
    extcurtableValue, /**< 各个分隔对应的值 */
    POWERM_YAXIS_USE_MIN, /**< 在yAxis和yAltAxis查询到的值取怎样取值，POWERM_YAXIS_USE_XX */
    0U, /**< 在y轴增加时使用Alt表 */
    POWERM_XAXIS_SUPPORT_BDIR, /**< X轴支持变动方向 */
    0U, /**< X轴区间线性插值 */
    (uint8)ARRAY_SIZE(extcurdiag), /**<  诊断故障功率百分比数量 */
    extcurdiag, /**<  断故障功率百分比表 */
    thisExtCurXGet, /**< 获取X轴值的函数 */
    500U, /**< 功率输出时增加斜率时间参数 */
    CURRENT_100MA_FROM_A(200U), /**< 功率输出时增加斜率步进参数 */
    500U, /**< 功率输出时减小斜率时间参数 */
    CURRENT_100MA_FROM_A(20U), /**< 功率输出时减小斜率步进参数 */
    0U, /**< 充电末端X轴达到这个值时进入降流阶段 */
    NULL, /**< 降流链表 */
    NULL,  /**< 获取降流末端比较值函数 */
    NULL, /**< getChargeEndTable 获取降流链表，此函数配置后“chargeEndConfigs”和“getChargeEndCheckVal”将不起作用 */
    NULL, /**< 计算出查表值之后，使用改函数修改查标值，可用于复杂降流策略 */
    NULL, /**< 在复位降流表时，只用该函数复位用户层数据，一般与hook函数配合使用 */
    0UL, /**< 温度改变引起查表区域变化时的确认时间，单位ms */
};



const PowerM_CurrentTypeType PowerMChannelNum = POWERM_CUR_TYPE_NUM;
const PowerM_CurrentTypeType PowerMChannelCurrentDC = POWERM_CUR_CHARGE_DC;
const PowerM_CurrentTypeType PowerMChannelCurrentAC = POWERM_CUR_CHARGE_AC;
const PowerM_CurrentTypeType PowerMChannelCurrentHeater = POWERM_CUR_CHARGE_HEATER;
const PowerM_ConfigParamType *const PowerMConfigParamMaps[POWERM_CUR_TYPE_NUM] = {
<%for (var powername in cfg) {%>    &PowerMCur<%- powername %>ConfigTable,
<%}%>    &PowerMCurChgHeaterConfigTable,
    &PowerMCurExtCurConfigTable,
};

PowerM_InnerChannelDataType PowerMInnerChannelData[POWERM_CUR_TYPE_NUM];
