<%
var retryInternal = 1000;
var timeMin = 300;
var validVoltMin = 50;
var continuousTime = 200;
var relayOffDelay = 500;

if (cfg.otherparm.hasOwnProperty(retryInternal)) retryInternal = cfg.retryInternal
if (cfg.otherparm.hasOwnProperty(timeMin)) timeMin = cfg.timeMin
if (cfg.otherparm.hasOwnProperty(validVoltMin)) validVoltMin = cfg.validVoltMin
if (cfg.otherparm.hasOwnProperty(continuousTime)) continuousTime = cfg.continuousTime
if (cfg.otherparm.hasOwnProperty(relayOffDelay)) relayOffDelay = cfg.relayOffDelay

var mdata = {
    enable:cfg.enable,
    retryNum: cfg.retryNum,
    retryInternal: retryInternal,
    timeMin: timeMin,
    timeout: cfg.timeout,
    validVoltMin: validVoltMin,
    finishCond_type: cfg.finishCond.type,
    finishCond_value: cfg.finishCond.value,
    finishCond_current: "CURRENT_INVALID_VALUE",
    getMcuVoltFunc: "UserStrategy_GetMcuVoltage_POSITIVE_MAIN",
    continuousTime: continuousTime,
    relayOnTimeout: 5000,
    relayOffDelay: relayOffDelay,
    dchgRelayOnTimeout: 5000,
    prechargeRelayChannel: "RELAYM_FN_PRECHARGE",
    dchgRelayChannel: "RELAYM_FN_POSITIVE_MAIN",
    currentMax: "CURRENT_INVALID_VALUE",
    overCurTime: 1000,
};

var processedcfg = {mdata: mdata};

globalInfo.setReturn({processedcfg:processedcfg});
%>
#ifndef PRECHARGEM_CFG_H_
#define PRECHARGEM_CFG_H_


#define PRECHARGE_EN    <%- mdata.enable%>








#endif
