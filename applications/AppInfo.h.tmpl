<%
var srcCommitID = "0000000000000000000000000000000000000000";
try {
    srcCommitID = globalInfo.requires.child_process.execSync('git rev-parse HEAD', {}).toString().trim();
} catch (err) {
}
try {
    globalInfo.requires.child_process.execSync('git diff --quiet', {});
    globalInfo.requires.child_process.execSync('git diff --cached --quiet', {});
} catch(err) {
    srcCommitID = srcCommitID.slice(0, 20);
}

var fwAddrSpace = ""

try {
    fwAddrSpace = globalInfo.requires.process.env.COPY;
} catch (err) {
}

if (fwAddrSpace == "B") {
    fwAddrSpace = "Boot_FWCopyBAddrSpace"
} else {
    fwAddrSpace = "Boot_FWCopyAAddrSpace"
}

const isValidOid = (oid) => {
    var ymd = oid.match(/^U[DO](\d{4})(\d{2})(\d{2})\d{3}$/)
    if (!ymd) return false;
    var isoString = ymd.slice(1).join('-');
    var d;
    if (!((d = new Date(isoString)) | 0)) return false;
    return d.toISOString().slice(0, 10) == isoString;
}

if (cfg.releaseType != "T" && cfg.releaseType != "R") throw "AppInfo.releaseType has wrong format";

var releaseName;

try {
    releaseName = globalInfo.SystemConnection.BcuType;
} catch (e) {
    releaseName = cfg.releaseName;
}

if (!releaseName) {
    throw "What's the releaseName?!"
}

var appVersion = "";

if (cfg.pid != "" || cfg.requireVer != "") {
    if (!/^[C,S,D]\d{3}\.\d{3}\.\d{3}\.\d{2}$/.test(cfg.pid)) throw "AppInfo.pid has wrong format";
    if (!/^\d+\.\d+$/.test(cfg.requireVer)) throw "AppInfo.requireVer has wrong format";

    releaseName += "_" + cfg.pid;
    //releaseName += "_" + cfg.oid;
    releaseName += "_" + cfg.releaseType;
    releaseName += cfg.requireVer + "." + cfg.buildVer;
    appVersion = "{" + (cfg.requireVer + "." + cfg.buildVer).split(".").map(x => x + 'U').join() + "}";
} else {
    releaseName += "_" + cfg.releaseType;
    releaseName += globalInfo.LibInfo.masterVersion;
}

const compatibleHWList = {
    'UPA650': ['V1.03'],
    'UPC6000': ['V1.03', 'V1.02_FOR_CHUHAN', 'V1.03_FOR_DIANKA'],
    'UPA640': ['V1.03','V1.04'],
    'UPA630': ['V1.00', 'V1.01'],
}

const compatibleHwMap = {
    'UPA650': {
        "V1.00": 1 << 2,
        "V1.01": 1 << 7,
        "V1.02": 1 << 7,
        "V1.03": 1 << 7,
    },
    'UPC6000': {
        "V1.02": 1 << 1,
        "V1.03": 1 << 1,
        "V1.02_FOR_CHUHAN": 1 << 2,
        "V1.03_FOR_DIANKA": 1 << 3,
    },
    'UPA640': {
       "V1.00": 1<<2,
       "V1.01": 1<<7,
       "V1.02": 1<<7,
       "V1.03": 1<<7,
       "V1.04": 1<<6,
   },
    'UPA630': {
       "V1.00": 1<<3,
       "V1.01": 1<<0,
   }
}
var pcba = globalInfo.SystemConnection.PCBA;
var compatibleHW = compatibleHWList[pcba].reduce((sum, x) => sum | compatibleHwMap[pcba][x], 0x00);

var buildTime = new Date();
var buildTimeStr =
    buildTime.getFullYear().toString()
    + ("0" + (buildTime.getMonth() + 1).toString()).slice(-2)
    + ("0" + buildTime.getDate().toString()).slice(-2)
    + ("0" + buildTime.getHours().toString()).slice(-2)
    + ("0" + buildTime.getMinutes().toString()).slice(-2)
    + ("0" + buildTime.getSeconds().toString()).slice(-2);


var releaseFileName = releaseName + "_" + buildTimeStr;
releaseFileName = releaseFileName.slice(0, releaseFileName.length - 2)

var mdata = {
    fwAddrSpace: fwAddrSpace,
    buildTime: buildTime,
    buildTimeStr: buildTimeStr,
    compatibleHW: compatibleHW,
    releaseName: releaseName,
    srcCommitID: srcCommitID,
    releaseFileName: releaseFileName,
    appVersion: appVersion,
}

globalInfo.setReturn({
        compatibleHW: compatibleHW,
        releaseName: releaseName,
        releaseFileName: releaseFileName,
    });

%>

#ifndef __APPINFO_H__
#define __APPINFO_H__


#include "LibInfo.h"

/**
 * 以下宏定义由cmake自动生成,不需要手动修改
 */
#define APP_INFO_SOURCE_COMMIT_ID        "<%- srcCommitID %>"
#define APP_INFO_CONFIG_COMMIT_ID        "<%- srcCommitID %>"
#define APP_INFO_BUILD_TIME              "<%- buildTimeStr %>"

#define APP_INFO_RELEASE_NAME            "<%- releaseName %>"
#define APP_INFO_FW_ADDR_SPACE           <%- fwAddrSpace %>
#define APP_INFO_COMPATIBLE_HW           <%- compatibleHW %>U

#define APP_INFO_BUILD_DATE_Y            <%- buildTime.getFullYear() %>U
#define APP_INFO_BUILD_DATE_M            <%- buildTime.getMonth() + 1%>U
#define APP_INFO_BUILD_DATE_D            <%- buildTime.getDate() %>U

#define APP_INFO_BUILD_TIME_H            <%- buildTime.getHours() %>U
#define APP_INFO_BUILD_TIME_M            <%- buildTime.getMinutes() %>U
#define APP_INFO_BUILD_TIME_S            <%- buildTime.getSeconds() %>U

#define APP_INFO_TEST_VERSION            <%- cfg.releaseType == 'T' ? 1 : 0; %>U


<% if (appVersion != "") {%>
extern const uint8 AppInfo_AppVerion[3];
#define APP_INFO_VERSION_ARRAY           <%- appVersion %>
<%}%>

#pragma push
#pragma CONST_SEG __GPAGE_SEG APP_INFO
extern const Boot_AppInfoTagType AppInfoTag;
#pragma pop

#endif
