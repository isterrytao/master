<%
var processedcfg = globalInfo.PduR.processedcfg;
var includes = [];

for (var module of processedcfg.uppers) {
    processedcfg[module].txs.forEach(function(tx) {
        if (tx.name != "None") {
            includes.pushIfNotExist(tx.name);
        }
    });
}
%>

#include "ComStack_Types.h"
#include "PduR_Lcfg.h"
<% for (var x of includes) { %>
#include "<%- x %>.h"
<% } %>

<%
for (var module of processedcfg.uppers) {
    var txmiddles = processedcfg[module].txmiddles;
%>

Std_ReturnType PduR_<%-module%>Transmit(PduIdType PduId, const PduInfoType* PduInfoPtr)
{
    Std_ReturnType res = E_NOT_OK;

    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_TX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>PduIdConfig[PduId].Module)
        {<%
        for (var v of txmiddles) {%>
            case PDUR_<%-v.toUpperCase()%>:
                res = <%-v%>_Transmit(PduR_Config-><%-module%>PduIdConfig[PduId].PduId, PduInfoPtr);
                break;<%
        }%>
            default:
                break;
        }
    }
    return res;
}
<% } %>
