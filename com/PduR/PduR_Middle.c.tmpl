
<%
var processedcfg = globalInfo.PduR.processedcfg;
var includes = [];

for (var module of processedcfg.middles) {
    processedcfg[module].txs.forEach(function(tx) {
        if (tx.name != "None") {
            includes.pushIfNotExist(tx.name);
        }
    });

    processedcfg[module].rxs.forEach(function(rx) {
        if (rx.name != "None") {
            includes.pushIfNotExist(rx.name);
        }
    });
}
%>

#include "PduR.h"
#include "PduR_Lcfg.h"

<% for (var x of includes) { %>
#include "<%- x %>_Cbk.h"
<% } %>

<%
for (var module of processedcfg.middles) {
    var txuppers = processedcfg[module].txuppers;
    var rxuppers = processedcfg[module].rxuppers;
%>

/*
====================================================================
<%- module %>
====================================================================
*/

BufReq_ReturnType PduR_<%-module%>CopyTxData(const PduIdType  PduId,
                                        const PduInfoType *const PduInfoPtr,
                                        const RetryInfoType *const RetryInfoPtr,
                                        PduLengthType *const TxDataCntPtr)
{
    BufReq_ReturnType res = BUFREQ_E_NOT_OK;

<% if (txuppers.length > 0) {%>
    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_TX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>TxPduIdConfig[PduId].Module)
        {<%
        for (var v of txuppers) {%>
            case PDUR_<%-v.toUpperCase()%>:
                res = <%-v%>_CopyTxData(PduR_Config-><%-module%>TxPduIdConfig[PduId].PduId, PduInfoPtr, RetryInfoPtr, TxDataCntPtr);
                break;<%
        }%>
            default:
                break;
        }
    }
<% } else {%>
    (void)PduId;
    (void)PduInfoPtr;
    (void)RetryInfoPtr;
    (void)TxDataCntPtr;
<% } %>
    return res;
}

void PduR_<%-module%>TxConfirmation(PduIdType PduId, const NotifResultType Result)
{
<% if (txuppers.length > 0) {%>
    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_TX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>TxPduIdConfig[PduId].Module)
        {<%
        for (var v of txuppers) {%>
            case PDUR_<%-v.toUpperCase()%>:
                <%-v%>_TxConfirmation(PduR_Config-><%-module%>TxPduIdConfig[PduId].PduId, Result);
                break;<%
        }%>
            default:
                break;
        }
    }
<% } else {%>
    (void)PduId;
    (void)Result;

<% } %>
}


BufReq_ReturnType PduR_<%-module%>StartOfReception(const PduIdType PduId,
                                            const PduLengthType SduLength,
                                            PduLengthType *const BufferSizePtr)
{
    BufReq_ReturnType res = BUFREQ_E_NOT_OK;

<% if (rxuppers.length > 0) {%>
    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_RX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>RxPduIdConfig[PduId].Module)
        {<%
        for (var v of rxuppers) {%>
            case PDUR_<%-v.toUpperCase()%>:
                res = <%-v%>_StartOfReception(PduR_Config-><%-module%>RxPduIdConfig[PduId].PduId, SduLength, BufferSizePtr);
                break;<%
        }%>
            default:
                break;
        }
    }
<% } else {%>
    (void)PduId;
    (void)SduLength;
    (void)BufferSizePtr;
<% } %>
    return res;
}

BufReq_ReturnType PduR_<%-module%>CopyRxData(const PduIdType  PduId,
                                        const PduInfoType *const PduInfoPointer,
                                        PduLengthType *const RxBufferSizePtr)
{
    BufReq_ReturnType res = BUFREQ_E_NOT_OK;

<% if (rxuppers.length > 0) {%>
    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_RX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>RxPduIdConfig[PduId].Module)
        {<%
        for (var v of rxuppers) {%>
            case PDUR_<%-v.toUpperCase()%>:
                res = <%-v%>_CopyRxData(PduR_Config-><%-module%>RxPduIdConfig[PduId].PduId, PduInfoPointer, RxBufferSizePtr);
                break;<%
        }%>
            default:
                break;
        }
    }
<% } else {%>
    (void)PduId;
    (void)PduInfoPointer;
    (void)RxBufferSizePtr;
<% } %>
    return res;
}


void PduR_<%-module%>RxIndication(const PduIdType PduId, const NotifResultType Result)
{
<% if (rxuppers.length > 0) {%>
    if (PduId < PDUR_CFG_<%-module.toUpperCase()%>_RX_PDUID_NUM)
    {
        switch(PduR_Config-><%-module%>RxPduIdConfig[PduId].Module)
        {<%
        for (var v of rxuppers) {%>
            case PDUR_<%-v.toUpperCase()%>:
                <%-v%>_RxIndication(PduR_Config-><%-module%>RxPduIdConfig[PduId].PduId, Result);
                break;<%
        }%>
            default:
                break;
        }
    }
<% } else {%>
    (void)PduId;
    (void)Result;
<% } %>
}

<% } %>