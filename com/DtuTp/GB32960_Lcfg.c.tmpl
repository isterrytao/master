<%
var xx = cfg.server.match(/([\.0-9_a-zA-Z]*):([0-9]*)/);
if (!xx || parseInt(xx[2]) >= 65535) {
    throw "server format error:" + server;
}

var rtMsgInterval = Math.round(cfg.rtmsg_interval * 1000);
var serverAddr =  xx[1];
var serverPort=  xx[2];
var apn = "";
if (cfg.hasOwnProperty('apn')) {
    apn = cfg.apn;
}

var rtMsgAlarmIntervals = "{";
rtMsgAlarmIntervals += Math.round(cfg.rtmsg_alarm_intervals[0] * 1000);
rtMsgAlarmIntervals += "UL, ";
rtMsgAlarmIntervals += Math.round(cfg.rtmsg_alarm_intervals[1] * 1000);
rtMsgAlarmIntervals += "UL, ";
rtMsgAlarmIntervals += Math.round(cfg.rtmsg_alarm_intervals[2] * 1000);
rtMsgAlarmIntervals += "UL, ";
rtMsgAlarmIntervals += Math.round(cfg.rtmsg_alarm_intervals[3] * 1000);
rtMsgAlarmIntervals += "UL}";
%>

#include "GB32960.h"
#include "GB32960_Cfg.h"



const GB32960_ConfigType GB32960ConfigData = {
    <%- serverPort %>U,    // uint16 serverPort;
    "<%- serverAddr %>",    // const char *serverAddr;
    GB32960_DCM_TX_PDUID,    // PduIdType tpTxPduId;
    GB32960_DCM_RX_PDUID,    // PduIdType tpRxPduId;
    GB32960_NOTIFY_OTA_REQUEST,    // void (*notifyOtaRequest)(void);
    GB32960_NOTIFY_DISCONNECTED,    // void (*notifyDisconnected)(void);
    GB32960_NOTIFY_CONNECTED,    // void (*notifyConnected)(void);
    GB32960_GET_CCID,    // void (*getCCID)(char *ccid, uint8 len);
    GB32960_TCP_CONNECT,    // Std_ReturnType (*tcpConnect)(const char *host, uint16 port);
    GB32960_TCP_TRANSMIT,    // Std_ReturnType (*tcpTransmit)(uint16 length, uint16 (*)(uint8 *, uint16), void (*)(NotifResultType));
    GB32960_TCP_DISCONNECT,    // Std_ReturnType (*tcpDisconnect)(void);
    <%- rtMsgInterval %>UL,    // uint32 rtMessageInterval;
    <%- rtMsgAlarmIntervals %>,    // uint32 rtMessageAlarmIntervals[4];
};


<% if (apn != "") {%>
const char *const DtuM35_Apn = "<%- apn %>";
<% } else { %>
const char *const DtuM35_Apn = NULL;
<% } %>
