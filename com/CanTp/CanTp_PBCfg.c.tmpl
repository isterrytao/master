<%

var bmuch = cfg.reduce((a, x) => (x.ch > a ? x.ch : a), 0) + 1;
try {
    var i = globalInfo.SystemConnection.BcuType.startsWith("A6") ? 1 : 0;
    for (; i < globalInfo.SystemConnection.BmuNum; i++) {
        cfg.push({ name: "BMU_" + i, hw: 0, dir: "rxtx", ch: bmuch + i % 4, rx: 0x780 + i, tx: 0x770 + i });
    }
} catch (e) {
}

var maxch = cfg.reduce((a, x) => (x.ch > a ? x.ch : a), 0);
var channelnum = maxch + 1;
var rxsdus = [];
var txsdus = [];
var rxnpdus = [];
var txnpdus = [];
var rxcfgs = cfg.filter(x => x.hasOwnProperty("rx"));
var txcfgs = cfg.filter(x => x.hasOwnProperty("tx"));

var rxsdus = rxcfgs.map(x => {
    var name = x.name.toUpperCase();
    return {
        name: name,
        ch: x.ch,
        stmin: x.stmin ? x.stmin : 2,
        bs: x.bs ? x.bs : 0,
        wftmax: x.wftmax ? x.wftmax : 10,
        rxnpdu: "CANIF_RX_CANTP_NPDU_" + name,
        txfcnpdu: x.hasOwnProperty("tx") ? "CANIF_TX_CANTP_NPDU_" + name : "CANTP_UNUSED",
        tatype: x.hasOwnProperty("tx") ? "CANTP_PHYSICAL" : "CANTP_FUNCTIONAL",
    }
});

cfg.forEach(x => {
    if (x.hasOwnProperty("rx")) {
        rxnpdus.push({
            name: "CANIF_RX_CANTP_NPDU_" + x.name.toUpperCase(),
            to: "CanTp",
            hw: x.hw,
            id: x.rx,
            extended: false,
            define: rxnpdus.length
        });
    }
    if (x.hasOwnProperty("tx")) {
        txnpdus.push({
            name: "CANIF_TX_CANTP_NPDU_" + x.name.toUpperCase(),
            from: "CanTp",
            hw: x.hw,
            id: x.tx,
            extended: false
        });
    }

});

txsdus = txcfgs.map(x => {
    var name = x.name.toUpperCase();
    return {
        name: name,
        ch: x.ch,
        txnpdu: "CANIF_TX_CANTP_NPDU_" + name,
        rxfcnpdu: x.hasOwnProperty("rx") ? "CANIF_RX_CANTP_NPDU_" + name : "CANTP_UNUSED",
        tatype: x.hasOwnProperty("rx") ? "CANTP_PHYSICAL" : "CANTP_FUNCTIONAL",
    }
});

globalInfo.setReturn({
        canifrxnpdus: rxnpdus,
        caniftxnpdus: txnpdus,
        rxsduids: rxcfgs.map(x => x.name),
        txsduids: txcfgs.map(x => x.name),
    });

%>
#include "CanTp.h"
#include "CanIf_Lcfg.h"

const PduIdType CANTP_NUM_RX_SDUS = <%- rxsdus.length.toString() + 'U' %>;
const PduIdType CANTP_NUM_TX_SDUS = <%- txsdus.length.toString() + 'U' %>;

static const CanTp_RxNsduCfgType/*CANTP_CONFIG_CONST*/ CanTp_RxNsduCfgInfo[] = {
<%
for (var v of rxsdus) {%>
    {
        <%-v.ch %>U,/* Tp Channel Num */
        <%-v.rxnpdu%>,/* CANTP_RX_NPDU_ID; from  CanIf */
        <%-v.txfcnpdu%>,/* CANTP_TXFC_NPDU_ID; to CanIf */
        25U,/* CANTP_NAR */
        70U,/* CANTP_NBR (N_Br+N_Ar) < 0.9*N_Bs */
        150U,/* CANTP_NCR */
#if !defined(CANTP_RXSDU_PADDING_ENABLE)&&!defined(CANTP_RXSDU_PADDING_DISABLE)
        CANTP_OFF,/* CANTP_PADDING_ACTIVATION */
#endif
        <%-v.tatype%>,/* CANTP_TA_TYPE */
#if !defined(CANTP_ADDRESSING_STANDARD_ONLY)&&!defined(CANTP_ADDRESSING_EXTENDED_ONLY)&&!defined(CANTP_ADDRESSING_MIX_ONLY)
        CANTP_STANDARD,/* CANTP_ADDRESSING_FORMAT */
#endif
        <%- v.bs %>U,/* CANTP_BS */
        <%- v.stmin %>U,/* CANTP_STMIN */
        <%- v.wftmax %>U,/* CANTP_WFTMAX */
        CANTP_UNUSED,/* CANTP_RX_NAE */
        CANTP_UNUSED,/* CANTP_RX_NSA */
        CANTP_UNUSED,/* CANTP_RX_NTA */
    },<%
}%>
};

static const CanTp_TxNsduCfgType/*CANTP_CONFIG_CONST*/ CanTp_TxNsduCfgInfo[] = {
<%
for (var v of txsdus) {%>
    /* CANTP_PDUID_<%-v.name.toUpperCase()%> from PduR */
    {
        <%-v.ch %>U,/* Tp Channel Num */
        <%-v.txnpdu%>,/* CANTP_TX_NPDU_ID; to CanIf */
        <%-v.rxfcnpdu%>,/* CANTP_RXFC_NPDU_ID; from  CanIf */
        25U,/* CANTP_NAS */
        70U,/* CANTP_NBS */
        25U,/* CANTP_NCS */
#if !defined(CANTP_TXSDU_PADDING_ENABLE)&&!defined(CANTP_TXSDU_PADDING_DISABLE)
        CANTP_OFF,/* CANTP_PADDING_ACTIVATION */
#endif
        <%-v.tatype%>,/* CANTP_TA_TYPE */
#if !defined(CANTP_ADDRESSING_STANDARD_ONLY)&&!defined(CANTP_ADDRESSING_EXTENDED_ONLY)&&!defined(CANTP_ADDRESSING_MIX_ONLY)
        CANTP_STANDARD,/* CANTP_ADDRESSING_FORMAT */
#endif
        CANTP_UNUSED,/* CANTP_TX_NAE */
        CANTP_UNUSED,/* CANTP_TX_NSA */
        CANTP_UNUSED,/* CANTP_TX_NTA */
    },<%
}%>
};

#if !defined(CANTP_CHANNEL_HALF_DUPLEX_ONLY) && !defined(CANTP_CHANNEL_FULL_DUPLEX_ONLY)
static const CanTp_ChannelModeType/*CANTP_CONFIG_CONST*/ CanTp_ChannelModeInfo[CANTP_CHANNELS] = {
    {
        CANTP_MODE_HALF_DUPLEX
    },
    {
        CANTP_MODE_HALF_DUPLEX
    }
};
#endif

const CanTp_ConfigType/*CANTP_CONFIG_CONST*/ CanTp_Cfg = {
#if !defined(CANTP_CHANNEL_HALF_DUPLEX_ONLY) && !defined(CANTP_CHANNEL_FULL_DUPLEX_ONLY)
    CanTp_ChannelModeInfo, /* Extended SDU indirection table */
#endif
    CanTp_RxNsduCfgInfo, /* Pointer to RxNsdu-cfg-table */
    CanTp_TxNsduCfgInfo /* Pointer to TxNsdu-cfg-table */
};
